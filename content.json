{"pages":[],"posts":[{"title":"Python 高级编程（1）","text":"前言当前 Python 版本主要存在 2 和 3 两个版本，就目前来看 2 已经逐步淡出历史舞台。学习时也应该从 3 开始，除非你还在看着老古董级别的教科书。 Python 最新消息来源Python 官方消息来源为 PEP，PEP 的全称为 Python 改进提案（Python Enhancement Proposal,PEP）。它是 Python 变化的书面文档。PEP 0 则告诉你最新的 Python 消息。 Python 2 和 Python 3 的差异语法变化 ptint 不再是一条语句而是一个函数，必须加上括号。 捕获异常的语法由 except exc, var 改成 except exc as var 。 弃用比较运算符 &lt;&gt; ，改用 != from module import * 只能用于模块，不能用在函数中。 现在 from .[model] import name 是相对导入唯一正确的语法。所有不以点字符开头的导入都被当做绝对导入。 sorted 函数与列表的 sort 方法不再接受 cmp 参数，应该用 key 参数来代替。 整数除法表达式返回的是浮点数。取整运算可以用 // 运算符，如 1//2。 标准库中的变化 部分模块进行了添加、弃用、改进或完全删除，一般来说这种变化在导入时就会抛出异常，从而发现问题所在。 数据类型与集合的变化3 中所有的字符串都是 Unicode ，字节（bytes）需要加一个 b 或 B 的前缀。不支持使用 u 前缀，使用会引发语法错误。(3.0和3.1不支持，3.3已恢复该前缀) 用于跨版本兼容性的常用工具和技术定义版本号格式为：主版本号.次版本号.修订号[.先行版本号、编译信息] 主版本号（MAJOR）：当你做了不兼容的API修改 次版本号（MINOR）：当你做了向后兼容的功能性新增 修订号（PATCH）：当你做了向后兼容的问题修正 __future__ 模块__future__ 模块主要功能是将新版本中的一些功能反向迁移至就版本中，采用的是导入语句的形式。1from __future__ import &lt;feature&gt; 可用语句： division ：python 3 新增的除法运算符（PEP238）。 absolute_import ：将所有不以点字符开头的 import 语句格式解释为绝对导入（PEP 328）。 print_function ： 将 print 语句变为函数使用。（PEP 3112）。 unicode_literals ：将每个字符串解释为 Unicode （PEP 3112）。 Six 模块提供了常用的兼容性的整个样板。使用时依然采用导入形式。1import six.moves.urllib as urllib 其他 Python 实现一般讨论的 Python 指的是 CPython，此外还有 Stacklless Python，Jpython，Iron Python，PyPy。 环境隔离环境隔离用于解决各种库版本的相互依赖，避免依赖相互冲突。这部分暂时用不着，后续再补充。 好处 解决了这样的难题：”X项目依赖1.x版本，而Y项目依赖4.x版本“。 项目不再受限于系统发行版仓库中包的版本。 不会破坏依赖特定包版本的其他系统服务。 项目依赖的包列表可以轻松”锁定（frozen）“，复制起来也很容易。 解决方案应用层 virtualenv venv buildout 系统级 Vagrant Docker 其他资源 Python 文档 PyPI-Python 包索引 PEP 0-Python 改进提案索引","link":"/2019/10/23/Python 高级编程（1）/"},{"title":"antd pro部署后刷新404解决方案","text":"前言最近在部署antdPro开发的前后端分离程序时，发现在本地正常，部署至服务器后刷新则出现404，原因在于antd Pro 支持两种路由模式，默认模式为 browserHistory，这种模式比较优雅，而对应的 hash 模式中间多了 # ，显得不那么好看。12https://cdn.com/users/123 # browserHistoryhttps://cdn.com/#/users/123 #hashHistory 修改方式在 config/config.js 中修改下面的配置即可。 1234export default { ... history: 'hash',// 默认是 browser} 解决方案官网不包括 Apache 的解决方案，在这里做一下总结。主要是使其每次都访问 index.html 页面。 Nginx 部署这里直接贴出来官方的配置，暂时没用 nginx 。 1234567891011server { listen 80; ... location / { # 用于配合 browserHistory使用 try_files $uri $uri/ /index.html; # 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验 # rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent; }} Apache 部署与 Nginx 相同，配置如下： 12345678&lt;Directory \"C:\\wwwroot\\redbook.qiandaoba.cn\"&gt; Options FollowSymLinks ExecCGI AllowOverride All Require all granted DirectoryIndex index.html # 用于配合 browserHistory使用 FallbackResource /index.html &lt;/Directory&gt;","link":"/2019/10/24/antd pro部署后刷新404解决方案/"},{"title":"二叉树","text":"[] 完全二叉树 [] 满二叉树 完全二叉树有n个节点，对于节点m来说: m!=1 则 m 父节点为⌊m/2⌋ 2*m &lt;= n 则 m 的左子树父节点为2*m 2*m &gt; n 则 m 无左子树也无右子树 2*m+1 &lt;= n 则 m 右子树的根节点为 2*m+1 2*m+1 &gt; n 则 m 无右子树 遍历，先中后说的是根节点的遍历顺序 先序遍历 根 左 右 DLR 中序遍历 左 根 右 LDR 后序遍历 左 右 根 LRD vscode 安装Markdown Preview Enhanced可显示二叉图","link":"/2019/01/24/二叉树/"},{"title":"搭建个人github博客","text":"前言说起来有点惭愧，早在16年就搭建了博客，却一直没有写，断断续续在csdn写过一点，都没有长久。本来就不是一个有毅力的人，鬼知道这个博客能写多久。闲话少说，下面记录下搭建过程。 环境准备nodejs安装个人电脑已安装过，本文不再赘述。 git安装git人手必备吧，教程自行搜索。 hexo安装npm 在安装nodejs后自带，配制环境变量即可任意目录使用。1npm install -g hexo-cli node-sass 地址404了，更换以下地址安装1npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ 验证是否成功1hexo -v 出现如图所示即为成功 hexo使用初始化1hexo init 一般来说执行一次就够了，没啥特殊的地方。第一次耗时有点久，毕竟gayhub日常被墙，建议dns改为 8.8.8.8 ,虽传言说这货并非googledns，但架不住好用。改完gayhub网速还是可以的 ~o(￣▽￣)o不想在当前目录初始化，后面可直接跟路径参数，具体用法参考官方文档，此处只记录简单用法。毕竟难点的我也不会。~o(￣▽￣)o 安装依赖1npm install hexo基于nodejs开发，熟悉node的应该对此命令不陌生。简单说就是安装根目录下面 package.json 文件中的各种包。npm毕竟是个包管理工具，类似maven，gradle。 生成静态文件1hexo g 启动服务器1hexo -s 默认端口 4000 启动成功后即可在 localhost:4000 查看 部署至github创建仓库仓库名格式 账号.github.io 一个帐号只允许创建一个仓库，我已经创建了 绑定自定义域名此处非必需。只是因为很久前一时脑抽花50块钱买了个十年的域名，备案的时候才发现，国内不支持。。闲置了好久，正好扔这博客上，反正github不需要备案。 点开新建的仓库，最右侧 settings，点开往下拉，如图所示。找到 Custom domain 改为自己的域名，保存即可。 上传至github修改根目录 _config.yml 中 deploy 项即可。1234deploy: type: git repository: https://github.com/vadonmo/vadonmo.github.io branch: master 其他问题图片显示问题 确认根目录 _config.yml 中 post_asset_folder 值为 true，此一步目的在于新建博客时，同时建立同名文件夹，放置相关资源，比如图片，视频等。 在根目录下执行下列命令1npm install hexo-asset-image --save 嗯。。。报警告了，不过不影响 此时再新建博客的时候在 _posts目录下面就会看到博客同名的文件夹，图片放进去就好。md正常相对路径引用即可。 1![posts_imgs](搭建个人github博客/posts_imgs.png) 换电脑数据没法同步问题参考知乎大佬解决方案建立分支即可，传送门简单来说是将hexo项目上传至博客分支，每次写完 deploy 后将hexo文件一块上传至分支。 每次部署CNAME文件消失问题我的解决办法是在public目录下新建 CNAME 文件，里面内容为自己域名。这样每次部署就不会丢失了。 常用命令1234# 本地预览，分别为清空缓存，生成静态文件，启动服务器hexo clean &amp;&amp; hexo g &amp;&amp; hexo s# 发布至githubhexo clean &amp;&amp; hexo g &amp;&amp; hexo d 结语就先这样吧，博客写着真累，果然以前不写博客是对的。~o(￣▽￣)o下一篇 讲讲怎么换背景吧，默认的稍微有点难看。","link":"/2019/01/23/搭建个人github博客/"},{"title":"更换hexo主题","text":"前言趁热打铁，写完上一篇，赶紧马不停蹄再来一篇，万一没激情就只不定哪天才能写了。 环境准备 在这挑一款好看的主题，我选的是这个，很简洁。 主题更换其实每一个主题作者都写了步骤，按照步骤来准没错。 切换到hexo主题目录1cd themes 安装1git clone https://github.com/esappear/hexo-theme-clover clover 以下为原作者教程，没啥可说的，每个人配置都不一样。CloverPreview PrerequisiteYou got a blog project built by Hexo. Your project directory should like this:1_config.yml node_modules package.json public scaffolds source themes Installation Clone the repository. 1git clone https://github.com/esappear/hexo-theme-clover themes/clover Set theme in _config.yml file of the project root: 1theme: clover Add hexo-renderer-sass 1npm install hexo-renderer-sass --save FeaturesFree home page.You can set posts of specific categories or tags in home page.123456789home: # set card style of home page # card: project-card category: Projects tag: - js - css except_category: Something except_tag: &apos;someTag&apos; Post which belongs to category or tag and don’t belongs to except_category or except_tag will be filtered. Page excerpt and photosYou can set an excerpt or photos in Front-matter.123456---layout: posttitle: my_post_titleexcerpt: my_post_excerptphotos: [my_photo_url]--- Tags page. Create a page named tags 1hexo new page &quot;tags&quot; Edit tags page, set page layout to tag. 12345---layout: tagtitle: tagsdate: 2018-10-05 12:12:53--- Categories page. Create a page named categories 1hexo new page &quot;categories&quot; Edit categories page, set page layout to category. 12345---layout: categorytitle: categoriesdate: 2018-10-05 12:12:53--- About page. Create a page named about 1hexo new page &quot;about&quot; Edit categories page, set page layout to about. 12345---layout: abouttitle: aboutdate: 2018-10-05 12:12:53--- Social Media123456social: GitHub: your-url Dribbble: your-url Behance: your-url Lofter: your-url Instagram: your-url Custom Menu12345menu: Project: / Stuffs: /tags/Stuffs Archive: /archives About: /about Card StyleTwo kinds of card style: project-card and article-card. (Never mind the name.)12345card_style: home: project-card archive: article-card tag: article-card category: article-card","link":"/2019/01/23/更换hexo主题/"},{"title":"群晖隐藏无权限的文件夹","text":"进如群晖后台 - 控制面板 - 终端机和 SNMP - 终端机 - 启用 ssh 功能 ssh登录群晖，具体换成自己的用户名，ip 1ssh 用户名@IP 切换 root 权限，密码输入用户名的密码 1sudo -i 打开 smb.conf 1vim /etc/samba/smb.conf 在samba配置文件(/etc/samba/smb.conf)的global section里加入，按 j 下移到最后， i 切换到插入模式。输入下面两行。 12map to guest=neveraccess based share enum=yes esc 后，输入 :wq 保存退出。 重启 1reboot","link":"/2020/01/19/群晖隐藏无权限的文件夹/"},{"title":"虚拟主机部署thinkphp","text":"前言前两天部分服务需要迁移到虚拟主机，php就这点好，环境依赖太低。随便给个地都能跑起来。之前就不部署了一个，觉得再部署个也是分分钟的事。。然而被事实狠狠的打了脸。还是自己太年轻。 环境准备ftp文件管理器我是用的filezilla，习惯了。用其他的也一样，不是重点。 虚拟主机一份各大服务商都行，随便来个。这个是公司提供的，服务商就不说了。 thinkphp项目一份项目基于thinphp5， 其他版本应该也差不多。 部署步骤 讲代码通过ftp文件管理器上传至虚拟主机 /htdocs 目录中，其他虚拟主机请参照说明，比如 www 等 将 public 中 index.php、.htaccess 移到根目录，入口变了，最好在其他目录下添加 .htaccess 文件，内容为 deny from all 避免被直接访问。 修改 index.php, 入口遍了相应的路径也要改变下。 123define(&apos;APP_PATH&apos;, __DIR__ . &apos;/application/&apos;);// 加载框架引导文件require __DIR__ . &apos;/thinkphp/start.php&apos;; 修改 .htaccess，此处有坑。。 12345678&lt;IfModule mod_rewrite.c&gt; # Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]&lt;/IfModule&gt; 其他问题500内部服务器错误 入口文件未找到。（我入口正常，nginx没问题） apache里重写未开启。 （我本地开启了，虚拟主机不知道，应该都是开启的，客服说没问题） hataccess文件出错。（就错在这一步） 按照上面步骤部署完后，打开一脸懵逼，居然报500错误。。一定是服务提供商环境没开全，怒怼客服，客服说我 .htaccess文件写错了，可我本地明明好好的，然后客服把我第4步第二行给注释掉了，就好了。。原因如下： [In some (or all?) server configurations, mod_rewrite requires followsymlinks to be enabled, or it will crater with a 500-Server Error.]在某些服务器配置中，mod_rewrite要求有followsymlinks，否则会显示500内部服务器错误。If your mod_rewrite code works without the options +followsymlinks directive, that means that your server configuration file has enabled them already, and you won’t need that directive in your .htaccess files.The requirement for enabling followsymlinks is not well-defined. The only way I learned about it was because I got a 500-Server Error the first time I ever enabled mod_rewrite, and the error log entry said something to the effect of, “You must enable SymLinks for this to work.”在任何情况下，只要您没有指定FollowSymLinks的选项（即Options FollowSymLinks），或者指定了SymLinksIfOwnerMatch选项，Apache将不得不调用额外的系统函数来检查符号链接。每次针对文件名的请求都将触发一次检查。如果你没有使用followsymlinks规则而网站访问正常，说明你的服务器配置已经默认调用followsymlinks的重写规则，你无需再为你的htaccess文件定义了。但在有些服务器500 Server Error之后的错误日志中提示需要定义SymLinks使得rewrite重写规则起作用。 结语到处都是坑，不学就掉坑。","link":"/2019/01/24/虚拟主机部署thinkphp/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"学习","slug":"学习","link":"/tags/学习/"},{"name":"antd","slug":"antd","link":"/tags/antd/"},{"name":"antd Pro","slug":"antd-Pro","link":"/tags/antd-Pro/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"教程","slug":"教程","link":"/tags/教程/"},{"name":"群晖","slug":"群晖","link":"/tags/群晖/"},{"name":"thinkphp","slug":"thinkphp","link":"/tags/thinkphp/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"数据结构","slug":"数据结构","link":"/categories/数据结构/"},{"name":"爬坑记录","slug":"爬坑记录","link":"/categories/爬坑记录/"},{"name":"thinkphp","slug":"thinkphp","link":"/categories/thinkphp/"}]}